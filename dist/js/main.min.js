const usersData=[{email:"123",password:"1234",cards:[{id:1,name:"wadwa",doctor:"Cardiologist",description:"Description 1",status:"active",priority:"medium"},{id:2,name:"awd",doctor:"Dentist",description:"Description 2",status:"active",priority:"high"}]},{email:"user2@example.com",password:"password2",cards:[{id:3,name:"awdawd",doctor:"Therapist",description:"Description 3",status:"active",priority:"high"},{id:4,name:"Card 4",doctor:"Cardiologist",description:"Description 4",status:"active",priority:"medium"}]}];async function getToken(e,t){try{const n=usersData.find(n=>n.email===e&&n.password===t);if(n){const e=Math.random().toString(36);return n.token=e,e}throw new Error("User is not registered!")}catch(e){alert(e.message)}}async function showHide(){const e=document.querySelector(".login-button"),t=document.querySelector(".logout-button"),n=document.querySelector(".create-visit-button"),o=document.querySelector(".filter__section"),s=document.querySelector(".header");s.style.background="none",s.style.height="auto",o.style.display="block",e.classList.add("hidden"),t.classList.remove("hidden"),n.classList.remove("hidden")}async function login(){const e=document.querySelector(".login-button"),t=document.querySelector(".logout-button");sessionStorage.getItem("token")?(showHide(),await fetchAndDisplayCards()):e.addEventListener("click",(async function(){const e=document.querySelector("#authorization-modal");e.style.display="block";const t=e.querySelector('input[type="email"]'),n=e.querySelector('input[type="password"]');e.querySelector(".send-button").addEventListener("click",(async function(o){o.preventDefault(),t.value&&n.value?async function(e,t,n){const o=await getToken(t,n);o&&(sessionStorage.token=o,showHide(),e.style.display="none",trueToken=o,await fetchAndDisplayCards())}(e,t.value,n.value):alert("Fill in all fields!")})),e.addEventListener("click",o=>{(o.target.classList.contains("modal")||o.target.classList.contains("btn-close"))&&(e.style.display="none",t.value="",n.value="")})})),t.addEventListener("click",()=>{sessionStorage.removeItem("token"),window.location.reload()})}async function fetchAndDisplayCards(){const e=sessionStorage.getItem("token");if(e)try{const t=usersData.find(t=>t.token===e);if(t){const e=t.cards;document.querySelector("#taskBoard").innerHTML="",e.forEach(async e=>{await displayCard(e)})}else console.error("User not found!")}catch(e){console.error("Error fetching cards:",e)}}async function displayCard(e){const t=document.querySelector("#taskBoard"),n=document.createElement("div");n.className="card",n.setAttribute("data-id",e.id),n.innerHTML=`\n      <div class="card__text">\n      <h4>Name:</h4> <p>${e.name}</p>\n      <h4>Doctor:</h4> <p>${e.doctor}</p>\n      <h4>Description:</h4> <p>${e.description}</p>\n      </div>\n      <div class="button__contianer">\n      <button onclick="showMore(${e.id})">Show more</button>\n      <button onclick="openEditModal(${e.id})">Edit</button>\n      </div>\n      <span class="delete-icon" onclick="deleteCard(${e.id})">&#10006;</span>\n    `,t.appendChild(n)}async function deleteCard(e){const t=confirm("Are you sure, you want to delete?"),n=sessionStorage.getItem("token");if(t&&n)try{const t=usersData.find(e=>e.token===n);if(t){const n=t.cards.findIndex(t=>t.id===e);-1!==n?(t.cards.splice(n,1),fetchAndDisplayCards()):console.error("Card not found!")}else console.error("User not found!")}catch(e){console.error("Error deleting card:",e)}}async function openEditModal(e){const t=sessionStorage.getItem("token"),n=usersData.find(e=>e.token===t);if(n){const t=n.cards.find(t=>t.id===e);if(t){const n=(e,t)=>e===t?"selected":"",o=document.createElement("div");o.className="edit__form",o.innerHTML=`\n    <div class="input-group">\n      <input required="" type="text" name="text" autocomplete="off" class="input" id="editName" value="${t.name}">\n      <label for="editName" class="user-label">Name</label>\n    </div>\n    <div class="select select__edit-container">\n      <label for="editDoctor" class="select__label">Doctor</label>\n      <select id="editDoctor" class="edit__select" onchange="handleDoctorChange()">\n        <option value="Cardiologist" ${n(t.doctor,"Cardiologist")}>Cardiologist</option>\n        <option value="Dentist"  ${n(t.doctor,"Dentist")}>Dentist</option>\n        <option value="Therapist"  ${n(t.doctor,"Therapist")}>Therapist</option>\n      </select>\n    </div>\n    <div class="input-group">\n      <input required="" type="text" name="text" autocomplete="off" class="input" id="editDescription" value="${t.description}">\n      <label for="editDescription" class="user-label">Description</label>\n    </div>\n    \n  <div class="select select__edit-container">\n  <label for="editStatus" class="select__label">Status</label>\n    <select id="editStatus" class="edit__select">\n      <option value="" disabled selected>Select status</option>\n      <option value="active" ${n(t.status,"active")}>Active</option>\n      <option value="completed" ${n(t.status,"completed")}>Completed</option>\n    </select>\n    </div>\n    <div class="select select__edit-container">\n    <label for="editPriority" class="select__label ">Priority</label>\n    <select id="editPriority" class="edit__select">\n      <option value="" disabled selected>Select priority</option>\n      <option value="low" ${n(t.priority,"low")}>Low</option>\n      <option value="medium" ${n(t.priority,"medium")}>Medium</option>\n      <option value = "high" ${n(t.priority,"high")}> High</ >\n    </select > \n    </div>\n    <div class="input-group">\n      <input required="" type="text" name="text" autocomplete="off" class="input" id="editComment" value="${t.comment}">\n      <label for="editComment" class="user-label">Comment</label>\n    </div>\n    <div id="additionalFields"></div>\n    <button onclick="saveChanges(${e})">Save</button>\n  `;const s=document.getElementById("editFormContainer");s.innerHTML="",s.appendChild(o);document.getElementById("editModal").style.display="block",handleDoctorChange(t)}else console.error("Card not found!")}else console.error("User not found!")}function handleDoctorChange(){const e=document.getElementById("editDoctor").value,t=document.getElementById("additionalFields");t.innerHTML="","Cardiologist"===e?t.innerHTML='\n      <div class="input-group">\n        <input required=""  name="text" autocomplete="off" class="input" type="number" id="editAge">\n        <label for="editAge" class="user-label">Age</label>\n      </div>\n      <div class="input-group">\n        <input required=""  name="text" autocomplete="off" class="input" type="number" id="editPressure">\n        <label for="editPressure" class="user-label">Normal pressure</label>\n      </div>\n      <div class="input-group">\n        <input required=""  name="text" autocomplete="off" class="input" type="number" id="editBMI">\n        <label for="editBMI" class="user-label">Body mass index</label>\n      </div>\n      <div class="input-group">\n        <input required=""  name="text" autocomplete="off" class="input" type="text" id="editHeartDisease">\n        <label for="editHeartDisease" class="user-label">Past diseases</label>\n      </div>\n    ':"Dentist"===e?t.innerHTML='\n    <div class="input-group">\n    <label for="editLastVisitDate" class="select__label">Date of the last visit</label>\n      <input required="" name="text" autocomplete="off" class="input edit__date" type="date" id="editLastVisitDate">\n    </div>\n    ':"Therapist"===e&&(t.innerHTML='\n    <div class="input-group">\n      <input required=""  name="text" autocomplete="off" class="input" type="number" id="editAge">\n      <label for="editAge" class="user-label">Age</label>\n    </div>\n    ')}function closeModal(){document.getElementById("editModal").style.display="none";document.querySelector(".edit__form").innerHTML=""}async function saveChanges(e){const t=sessionStorage.getItem("token"),n=document.querySelector(".edit__form"),o=document.querySelector(`.card[data-id= "${e}"]`),s=n.querySelector("#editName").value,i=n.querySelector("#editDoctor").value,a=n.querySelector("#editDescription").value,r=n.querySelector("#editStatus").value,l=n.querySelector("#editPriority").value,d=n.querySelector("#editComment").value,c=usersData.find(e=>e.token===t);if(c){const t=c.cards.find(t=>t.id===e);if(t){if(t.name=s,t.doctor=i,t.description=a,t.status=r,t.priority=l,t.comment=d,"Cardiologist"===i){const e=n.querySelector("#editAge").value,o=n.querySelector("#editPressure").value,s=n.querySelector("#editBMI").value,i=n.querySelector("#editHeartDisease").value;t.age=e,t.pulse=o,t.massIndex=s,t.pastDiseases=i}else if("Dentist"===i){const e=n.querySelector("#editLastVisitDate").value;t.lastVisit=e}else if("Therapist"===i){const e=n.querySelector("#editAge").value;t.age=e}o.innerHTML=`\n        <div class="card__text">\n        <h4>Name:</h4> <p>${s}</p>\n        <h4>Doctor:</h4> <p>${i}</p>\n        <h4>Description:</h4> <p>${a}</p>\n        </div>\n        <div class="button__contianer">\n        <button onclick="showMore(${e})">Show more</button>\n        <button onclick="openEditModal(${e})">Edit</button>\n        </div>\n        <span class="delete-icon" onclick="deleteCard(${e})">&#10006;</span>\n            `,closeModal()}else console.error("Card not found!")}else console.error("User not found!")}async function showMore(e){const t=sessionStorage.getItem("token"),n=usersData.find(e=>e.token===t);if(n){const t=n.cards.find(t=>t.id===e);if(t){const e=document.getElementById("detailsContainer"),n=document.createElement("div");n.className="details__content";const o=`\n    <h4>Name: <span>${t.name}</span></h4>\n    <h4>Doctor: <span>${t.doctor}</span></h4>\n    <h4>Description: <span>${t.description}</span></h4>\n    <h4>Priority: <span>${t.priority}</span></h4>\n    <h4>Status: <span>${t.status}</span></h4>\n    <h4>Comment for doctor: <span>${t.comment}</span></h4>\n  `;"Cardiologist"===t.doctor?n.innerHTML=`\n    ${o}\n      <h4>Age: <span>${t.age}</span></h4>\n      <h4>Normalpressure: <span>${t.pulse}</span></h4>\n      <h4>Body mass index: <span>${t.massIndex}</span></h4>\n      <h4>Past diseases: <span>${t.pastDiseases}</span></h4>\n    `:"Dentist"===t.doctor?n.innerHTML=`\n    ${o}\n      <h4>Date of the last visit: <span>${t.lastVisit}</span></h4>\n    `:"Therapist"===t.doctor&&(n.innerHTML=`\n    ${o}\n    <h4>Age: <span>${t.age}</span></h4>\n    `),e.innerHTML="",e.appendChild(n);document.getElementById("detailsModal").style.display="block"}else console.error("Card not found!")}else console.error("User not found!")}function closeShowMore(){document.getElementById("detailsModal").style.display="none"}async function filterCards(){const e=sessionStorage.getItem("token"),t=document.getElementById("searchInput").value.toLowerCase(),n=document.getElementById("doctorFilter").value,o=document.getElementById("statusFilter").value,s=document.getElementById("priorityFilter").value,i=usersData.find(t=>t.token===e),a=i.cards;i?a.forEach(e=>{const i=document.querySelector(`.card[data-id="${e.id}"]`),a=e.name,r=e.doctor,l=e.status,d=e.priority,c=a?a.toLowerCase():"",u=r||"",p=l?l.toLowerCase():"",m=d?d.toLowerCase():"",y=c.includes(t),f=""===n||u===n,h=""===o||p===o,v=""===s||m===s;i.style.display=y&&h&&v&&f?"":"none"}):console.error("User not found!")}login();
const btnMakeForm=document.querySelector(".header__btn-make-visit"),form=document.querySelector(".header__form"),createModal=document.getElementById("createModal"),inputCreateName=document.querySelector("#create__inputName"),purpose=document.querySelector("#create__inputPurpose"),age=document.querySelector("#create__inputAge"),pulse=document.querySelector("#create__inputPressure"),massIndex=document.querySelector("#create__inputBMI"),description=document.querySelector("#create__inputDescription"),pastDiseases=document.querySelector("#create__inputDisease"),lastVisit=document.querySelector("#create__inputLastVisit"),comment=document.querySelector("#create__inputComment"),error=document.querySelector(".form__error"),btnCloseForm=document.querySelector(".form__button-close-form"),selectMenuDoctors=document.querySelector(".form__selector-doctors"),selectPriorityContainer=document.querySelector("#create__selectPriority"),btnCreateVisit=document.querySelector(".form__button-create-visit");let elementsForm=document.querySelectorAll(".form input, .form select"),formData=[];class Module{constructor(){}clearModal(){form.style.display="none",createModal.style.display="none",elementsForm.forEach(e=>{e.value=""}),purpose.style.display="none",description.style.display="none",inputCreateName.style.display="none",selectPriorityContainer.style.display="none",btnCreateVisit.style.display="none",comment.style.display="none",pastDiseases.style.display="none",massIndex.style.display="none",pulse.style.display="none",age.style.display="none",lastVisit.style.display="none",error.style.display="none"}closeForm(){btnCloseForm.addEventListener("click",e=>{e.preventDefault(),this.clearModal()}),document.addEventListener("click",e=>{e.target===createModal&&this.clearModal()})}sendInfo(){btnCreateVisit.addEventListener("click",async e=>{e.preventDefault();if(Array.from(document.querySelectorAll(".form div")).filter(e=>"none"!==window.getComputedStyle(e).display&&"create__inputComment"!==e.id).some(e=>Array.from(e.querySelectorAll("input, select")).some(e=>""===e.value)))return void(error.style.display="block");if("none"!==age.style.display&&(parseFloat(document.querySelector("#createAge").value)>=150||parseFloat(document.querySelector("#createAge").value)<=0))return error.textContent="Incorrect value! Enter your real age",void(error.style.display="block");if("none"!==pulse.style.display){const e=parseFloat(document.querySelector("#createPressure").value);if(isNaN(e)||e>=170||e<=50)return error.textContent="Incorrect value! Enter your real pulse",void(error.style.display="block")}if("none"!==massIndex.style.display){const e=parseFloat(document.querySelector("#createBMI").value);if(isNaN(e)||e>=700||e<=0)return error.textContent="Incorrect value! Enter your real mass index",void(error.style.display="block")}const t=document.querySelector("#createName").value;if(!isNaN(parseFloat(t)))return error.textContent="Incorrect value! Enter your real name",void(error.style.display="block");if("none"!==lastVisit.style.display){const e=new Date("1950-01-01"),t=new Date,o=document.querySelector("#createLastVisitDate"),r=new Date(o.value);if(r<=e||r>=t)return error.textContent="Incorrect value! Enter correct data",void(error.style.display="block")}const o=new CreateVisit;this.clearModal();try{await sendInfo(o),await fetchAndDisplayCards()}catch(e){console.error("Error sending data:",e)}})}}class Visit{constructor(){this.dontAddElements=!0}makeOptions(){if(selectMenuDoctors&&!0===this.dontAddElements){this.dontAddElements=!1;const e=()=>{purpose.style.display="block",description.style.display="block",inputCreateName.style.display="block",selectPriorityContainer.style.display="flex",btnCreateVisit.style.display="block",comment.style.display="block"};selectMenuDoctors.addEventListener("change",e)}}}class VisitDentist extends Visit{constructor(){super()}doctorNotes(){selectMenuDoctors&&selectMenuDoctors.addEventListener("change",()=>{"Dentist"===selectMenuDoctors.value?lastVisit.style.display="block":lastVisit.style.display="none"})}}class VisitTherapist extends Visit{constructor(){super()}doctorNotes(){selectMenuDoctors&&selectMenuDoctors.addEventListener("change",()=>{"Cardiologist"===selectMenuDoctors.value||"Therapist"===selectMenuDoctors.value?age.style.display="block":age.style.display="none"})}}class VisitCardiologist extends Visit{constructor(){super()}doctorNotes(){selectMenuDoctors&&selectMenuDoctors.addEventListener("change",()=>{"Cardiologist"===selectMenuDoctors.value?(pulse.style.display="block",massIndex.style.display="block",pastDiseases.style.display="block"):(pastDiseases.style.display="none",massIndex.style.display="none",pulse.style.display="none")})}}function openModalWindow(){createModal.style.display="block",form.style.display="flex"}const module=new Module,visit=new Visit;visit.makeOptions();const visitDentist=new VisitDentist;visitDentist.doctorNotes();const visitTherapist=new VisitTherapist;visitTherapist.doctorNotes();const visitCardiologist=new VisitCardiologist;visitCardiologist.doctorNotes(),module.sendInfo(),module.closeForm();class CreateVisit{constructor(){this.doctor=form.querySelector(".form__selector-doctors").value,this.name=form.querySelector(".form__patient-name").value,this.priority=form.querySelector(".form__selector-urgency").value,this.purpose=form.querySelector(".form__purpose").value,this.description=form.querySelector(".form__description").value,this.lastVisit=form.querySelector(".form__last-visit").value,this.age=form.querySelector(".form__age").value,this.pulse=form.querySelector(".form__pulse").value,this.massIndex=form.querySelector(".form__mass-index").value,this.pastDiseases=form.querySelector(".form__past-diseases").value,this.comment=form.querySelector(".form__comment").value,this.status="active"}}async function sendInfo(e){const t=sessionStorage.getItem("token");try{const o=usersData.find(e=>e.token===t);if(o){const t={id:Math.floor(1e4*Math.random()),...e};return o.cards.push(t),t}throw new Error("User not found!")}catch(e){throw console.error("Error sending data:",e),new Error(e)}}
//# sourceMappingURL=../sourcemaps/main.min.js.map
